local data = require "collections.data"
local move_acceleration = 3500
local air_acceleration_factor = 0.8
local max_speed = 300
local gravity = -2500
local jump_takeoff_speed = 400

function init(self)
	msg.post(".", "acquire_input_focus")
	self.velocity = vmath.vector3(0, 0, 0)
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.move_input = 0
	self.current_roof = ""
	label.set_text("#contact", "")
end

function update(self, dt)
		local target_speed = self.move_input * max_speed
		local speed_diff = target_speed - self.velocity.x
		local acceleration = vmath.vector3(0, gravity, 0)
		
		if speed_diff ~= 0 then
			if speed_diff < 0 then
				acceleration.x = -move_acceleration
			else
				acceleration.x = move_acceleration
			end
				
			if not self.ground_contact then
				acceleration.x = air_acceleration_factor * acceleration.x
			end
		end

		local dv = acceleration * dt

		if math.abs(dv.x) > math.abs(speed_diff) then
			dv.x = speed_diff
		end

		local v0 = self.velocity
		self.velocity = self.velocity + dv
		local dp = (v0 + self.velocity) * dt * 0.5
		go.set_position(go.get_position() + dp)

		--update_animations(self)
		
		-- reset volatile state
		
		self.correction = vmath.vector3()
		self.move_input = 0
		self.ground_contact = false
		label.set_text("#contact", "")
		self.oncontact = false
end

local function handle_obstacle_contact(self, normal, distance)
	local proj = vmath.dot(self.correction, normal)
	local comp = (distance - proj) * normal
	self.correction = self.correction + comp
	go.set_position(go.get_position() + comp)

	if normal.y > 0.7 then
		self.ground_contact = true
	end

	proj = vmath.dot(self.velocity, normal)
	
	if proj < 0 then
		self.velocity = self.velocity - proj * normal
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		local pos = go.get_position()
		
		if message.group == hash("roof1") then
			handle_obstacle_contact(self, message.normal, message.distance)
			self.current_roof = "roof1"
		end

		if message.group == hash("roof2") then
			handle_obstacle_contact(self, message.normal, message.distance)
			self.current_roof = "roof2"
		end

		if message.group == hash("roof3") then
			handle_obstacle_contact(self, message.normal, message.distance)
			self.current_roof = "roof3"
		end

		if message.group == hash("street") then
			if self.current_roof == "roof1" then
				pos.x = (data.BUILD1.x + data.BUILD1.y)/2
				pos.y = data.BUILD1.z + 20
				go.set_position(pos)
			end

			if self.current_roof == "roof2" then
				pos.x = (data.BUILD2.x + data.BUILD2.y)/2
				pos.y = data.BUILD2.z + 20
				go.set_position(pos)
			end
				
			if self.current_roof == "roof3" then
				pos.x = (data.BUILD3.x + data.BUILD3.y)/2
				pos.y = data.BUILD3.z + 20
				go.set_position(pos)
			end
		end
		
		if message.group == hash("starlink") then
			label.set_text("#contact", "!!!")
		end
	end
end

local function jump(self)
	if self.ground_contact then
		self.velocity.y = jump_takeoff_speed
	end
end

local function abort_jump(self)
	if self.velocity.y > 0 then
		self.velocity.y = self.velocity.y * 0.5
	end
end

function on_input(self, action_id, action)
	if action_id == hash("left_move") then
		self.move_input = -action.value
		sprite.set_hflip("#sprite", true)
	end
	
	if action_id == hash("right_move") then
		self.move_input = action.value
		sprite.set_hflip("#sprite", false)
	end
	
	if action_id == hash("jump") then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end

	if action_id == hash("skill") then
		if action.pressed and data.BATTERY >= data.BATTERY_MAX then
			data.PLAYER_ROOF = self.current_roof
			data.PRESSF = true
		end
	end
end

